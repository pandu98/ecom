import type { FramebusSubscriberArg, FramebusOnHandler, FramebusReplyHandler } from "./lib/types";
declare type VerifyDomainMethod = (domain: string) => boolean;
declare type FramebusOptions = {
    channel?: string;
    origin?: string;
    verifyDomain?: VerifyDomainMethod;
};
export declare class Framebus {
    origin: string;
    channel: string;
    private verifyDomain?;
    private isDestroyed;
    private listeners;
    constructor(options?: FramebusOptions);
    static Promise: PromiseConstructor;
    static setPromise(PromiseGlobal: typeof Framebus["Promise"]): void;
    static target(options?: FramebusOptions): Framebus;
    include(childWindow: Window): boolean;
    target(options?: FramebusOptions): Framebus;
    emit(eventName: string, data?: FramebusSubscriberArg | FramebusReplyHandler, reply?: FramebusReplyHandler): boolean;
    emitAsPromise<T = void>(eventName: string, data?: FramebusSubscriberArg): Promise<T>;
    on(eventName: string, originalHandler: FramebusOnHandler): boolean;
    off(eventName: string, originalHandler: FramebusOnHandler): boolean;
    teardown(): void;
    private checkOrigin;
    private namespaceEvent;
}
export {};
